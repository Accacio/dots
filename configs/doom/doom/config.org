#+PROPERTY: header-args :comments yes

* General settings
#+begin_src emacs-lisp
(setq user-full-name "Rafael Accácio Nogueira"
      user-mail-address "rafael.accacio.nogueira@gmail.com")
#+end_src

#+begin_src emacs-lisp
(setq search-whitespace-regexp ".*?")

(show-smartparens-global-mode 1)

(let ((langs '("american" "fr_FR" "pt_BR")))
      (setq lang-ring (make-ring (length langs)))
      (dolist (elem langs) (ring-insert lang-ring elem)))
(let ((dics '("american-english" "french" "portuguese")))
      (setq dic-ring (make-ring (length dics)))
      (dolist (elem dics) (ring-insert dic-ring elem)))

  (defun cycle-ispell-languages ()
      (interactive)
      (let (
            (lang (ring-ref lang-ring -1))
            (dic (ring-ref dic-ring -1))
            )
        (ring-insert lang-ring lang)
        (ring-insert dic-ring dic)
        (ispell-change-dictionary lang)
        (setq ispell-complete-word-dict (concat "/usr/share/dict/" dic))
        ))
(global-set-key [f6] 'cycle-ispell-languages)
#+end_src
* Completion
** ivy
#+begin_src emacs-lisp
(setq ivy-use-selectable-prompt t)
#+end_src
* UI
** Theme/Visuals
#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function.
(setq doom-theme 'doom-nord)
;; (setq doom-font (font-spec :family "monospace" :size 14))
;; (setq doom-font (font-spec :family "Glass TTY VT220" :size 20))
;; (setq doom-font (font-spec :family "Source Code Pro" :size 16))
(setq doom-font (font-spec :family "Roboto Mono" :size 16))
;; (setq doom-font (font-spec :family "Fira Code" :size 16))


(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(95 . 80) '(100 . 100)))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Transparency"                 "T" 'toggle-transparency))

(setq global-hl-line-modes nil)

(setq display-line-numbers-type 'relative)
(custom-set-faces!
  '(line-number :foreground "#A3BE8C")
  '(line-number-current-line :foreground "#EBCB8B")
  )
#+end_src
* Editor
** emails
- use mail-mode with neomutt buffers
#+begin_src emacs-lisp
(after! core
(setq auto-mode-alist (delete '("mutt" . mail-mode) auto-mode-alist))
(add-to-list 'auto-mode-alist '("/tmp/neomutt" . mail-mode))
)
#+end_src
** Rotate text
#+begin_src emacs-lisp
(after! rotate-text
  :config
  (pushnew! rotate-text-words '("before" "after"))
  (pushnew! rotate-text-words '("horizontal" "vertical"))
  (pushnew! rotate-text-words '("increase" "decrease"))
  (pushnew! rotate-text-words '("top" "bottom"))
  (pushnew! rotate-text-words '("left" "right"))
  (pushnew! rotate-text-words '("up" "down"))
  (pushnew! rotate-text-words '("on" "off"))
  (set-rotate-patterns! 'c-mode
    :words '(("float" "double")))

  )
#+end_src
* Lang
** org
- use greek letters on org-mode sections
#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("α" "β" "γ" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ" "μ" "ν" "ξ" "ο" "π" "ρ" "σ" "τ" "υ" "φ" "χ" "ψ" "ω"))
#+end_src
- change ellipsis symbol
#+begin_src emacs-lisp
(setq org-ellipsis " ▼") ;;▼ ⤵
#+end_src
- use python3
#+begin_src emacs-lisp
(setq org-babel-python-command "python3")
#+end_src

#+begin_src emacs-lisp
(after! org
(setq org-latex-default-packages-alist
  '(("AUTO" "inputenc"  t ("pdflatex"))
    ("T1"   "fontenc"   t ("pdflatex"))
    (""     "graphicx"  t)
    (""     "longtable" nil)
    (""     "wrapfig"   nil)
    (""     "rotating"  nil)
    ("normalem" "ulem"  t)
    (""     "amsmath"   t)
    (""     "tikz"   t)
    (""     "amssymb"   t)
    (""     "capt-of"   nil)
    (""     "hyperref"  nil))
)
(setq org-format-latex-header "\\documentclass{article}
\\usepackage[usenames]{color}
\[DEFAULT-PACKAGES]
\[PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\DeclareSymbolFontAlphabet{\\mathnormal}{letters}
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}
\\newcommand{\\N}{\\mathbb{N}}
\\newcommand{\\Z}{\\mathbb{Z}}
\\newcommand{\\Q}{\\mathbb{Q}}
\\newcommand{\\R}{\\mathbb{R}}
\\newcommand{\\C}{\\mathbb{C}}
\\newcommand{\\T}{^{\\mathrm{T}}}
\\newcommand{\\1}{\\mathbf{1}}
\\newcommand{\\0}{\\mathbf{0}}
\\newcommand{\\set}{\\mathcal}
\\newcommand{\\abs}[1]{\\left\\lvert#1\\right\\rvert}
\\newcommand{\\norm}[1]{\\left\\lVert#1\\right\\rVert}
\\renewcommand{\\vec}[1]{\\boldsymbol{#1}}
\\newcommand{\\setbuild}[2]{\\{#1\\mid#2\\}}
\\newcommand{\\seq}[2][n]{\\lbrace #2_{0},\\ldots,\\,#2_{#1} \\rbrace}
\\newcommand{\\hadamard}[2]{#1\\circ #2}
\\newcommand{\\kron}[2]{#1\\otimes#2}
\\newcommand{\\symmetric}{\\mathbb{S}}
\\newcommand{\\semidefpos}{\\mathbb{S}_{+}}
\\newcommand{\\defpos}{\\mathbb{S}_{++}}
\\newcommand{\\elem}[2][1]{{#2}_{(#1)}}
\\renewcommand{\\implies}{\\Rightarrow}
\\renewcommand{\\iff}{\\Leftrightarrow}
\\newcommand{\\argmax}{\\mathop{\\arg\\!\\max}}
\\newcommand{\\argmin}{\\mathop{\\arg\\!\\min}}
\\newcommand{\\maximize}{\\mathop{\\textrm{maximize}}}
\\newcommand{\\interior}{\\mathop{\\textrm{int}}}
\\newcommand{\\minimize}{\\mathop{\\textrm{minimize}}}
\\newcommand{\\minimiser}{\\mathop{\\textrm{minimiser}}}
\\newcommand{\\collection}[1]{\\set{#1}\\!\\!\\raisebox{-2pt}{$\\set{#1}$}\\!\\!\\set{#1}}
\\newcommand{\\maximiser}{\\mathop{\\textrm{maximiser}}}
\\renewcommand{\\epsilon}{\\varepsilon}
\\renewcommand{\\phi}{\\varphi}
")
(add-to-list 'org-preview-latex-process-alist '(graphicsmagick :programs ("latex" "gm")
                                                               :description "pdf > png"
                                                               :message "you need to install the programs: latex and graphicsmagick"
                                                               :use-xcolor t
                                                               :image-input-type "pdf"
                                                               :image-output-type "png"
                                                               :image-size-adjust (1.0 . 1.0)
                                                               :latex-compiler ("pdflatex -interaction nonstopmode -output-directory %o %f")
                                                               :image-converter ("gm convert -density %D -trim -antialias -quality 100 %f %O")))

;; This command sets 'graphicsmagick' process for LaTeX previews in org-mode.
(setq org-preview-latex-default-process 'graphicsmagick)
)
#+end_src


** python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            (setq
             imenu-generic-expression
             '(
               ("Cell" "^## \\(.*[A-z].*\\)" 1)
               ("Comment" "#= \\([A-z].*\\)" 1)
               )
             )
            (setq imenu-create-index-function '(lambda () (imenu--generic-function imenu-generic-expression)))
            )
          )
#+end_src
** Bibtex
#+begin_src emacs-lisp

(defun bibtex-completion-format-citation-cite-org (keys)
  "Format ebib references for keys in KEYS."
  (s-join ", "
          (--map (format "cite:%s" it) keys)))

(after! bibtex-completion
  (setcdr (assq 'org-mode bibtex-completion-format-citation-functions) 'bibtex-completion-format-citation-cite-org)
)

(after! bibtex
  (setq bibtex-completion-bibliography '("~/research/bibliography.bib")
        bibtex-completion-library-path '("~/research/bibliography/")
        bibtex-completion-find-note-functions '(orb-find-note-file)
        ;; bibtex-completion-find-note-functions (list #'bibtex-completion-find-note-multiple-files #'bibtex-completion-find-note-one-file)
        bibtex-completion-pdf-symbol "!"
        bibtex-completion-notes-symbol "n"
        )
  (setq bibtex-completion-display-formats
        '((t             . "${year:4} ${author:36} ${title:50} ${=type=:13} ${=has-pdf=:1}${=has-note=:1} ${readstatus:7} ${ranking:5} ${keywords}")))
  (setq bibtex-completion-additional-search-fields '(tags ranking readstatus keywords))

  (setq bibtex-dialect 'BibTeX)
  ;; (setq bibtex-dialect 'biblatex)
  ;; (defun my-bibtex-autokey-unique (key)
  ;;   "Make a unique version of KEY."
  ;;   (save-excursion
  ;;     (let ((org-ref-bibliography-files (org-ref-find-bibliography))
  ;;           (trykey key)
  ;; 	  (next ?a))
  ;;       (if (org-ref-key-in-file-p trykey (car org-ref-bibliography-files))
  ;;       (while (and
  ;;               (org-ref-key-in-file-p trykey (car org-ref-bibliography-files))
  ;; 		  (<= next ?z))
  ;; 	(setq trykey (concat key (char-to-string next)))
  ;; 	(setq next (1+ next))))
  ;;       trykey))

  (setq bibtex-autokey-year-length 4)
  (setq bibtex-autokey-names 1)
  (setq bibtex-autokey-names-stretch 1)
  (setq bibtex-autokey-additional-names "EtAl")
  (setq bibtex-autokey-name-case-convert-function 'capitalize)
  (setq bibtex-maintain-sorted-entries 'entry-class)
  ;; (setq bibtex-autokey-before-presentation-function 'my-bibtex-autokey-unique)
  (setq bibtex-autokey-before-presentation-function nil)

  (defun bibtex-generate-autokey ()
    (let* ((names (bibtex-autokey-get-names))
           (year (bibtex-autokey-get-year))
           (title (bibtex-autokey-get-title))
           (autokey (concat
                     names
                     ;; (unless (or (equal names "")
                     ;;             (equal title ""))
                     ;;   "_") ;; string to separate names from title
                     ;; title
                     ;; (unless (or (and (equal names "")
                     ;;                  (equal title ""))
                     ;;             (equal year ""))
                     ;;   bibtex-autokey-year-title-separator)
                     year
                     bibtex-autokey-prefix-string ;; optional prefix string
                     )))
      (if bibtex-autokey-before-presentation-function
          (funcall bibtex-autokey-before-presentation-function autokey)
        autokey)))
  )
#+end_src

* org-roam
#+begin_src emacs-lisp
(require 'org-roam-protocol)
(after! org-roam
  (setq org-roam-directory (file-truename "~/research/notes/"))
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain "%?" :if-new
           (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("r" "bibliography reference" plain
           (file "~/.config/doom/ref.org")
           :if-new
           (file+head "references/${citekey}.org" "#+title: ${citekey}\n"))
          ))

  (cl-defmethod org-roam-node-directories ((node org-roam-node))
    (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (format "%s" (car (reverse (f-split dirs))))
      ""))

  (cl-defmethod org-roam-node-type ((node org-roam-node))
  "Return the TYPE of NODE."
  (condition-case nil
      (file-name-nondirectory
       (directory-file-name
        (file-name-directory
         (file-relative-name (org-roam-node-file node) org-roam-directory))))
    (error "")))

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
  (let* ((count (caar (org-roam-db-query
                       [:select (funcall count source)
                                :from links
                                :where (= dest $s1)
                                :and (= type "id")]
                       (org-roam-node-id node)))))
    (format "[%d]" count)))

(setq org-roam-node-display-template "📁 ${directories:10} | ${title:50} | ⚡ ${tags}")

(setq org-roam-mode-sections
      '((org-roam-backlinks-section :unique t)
        org-roam-reflinks-section))
(require 'org-roam-export)
;; (setq org-roam-node-display-template
;;       (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;; org-roam-db-gc-threshold most-positive-fixnum
  ;; org-roam-db-update-on-save t
  ;; org-id-link-to-org-use-id t)
  )
#+end_src

* Research
#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after (org-roam)
  :init
  (org-roam-bibtex-mode)
  :config
   (setq orb-preformat-keywords
   '("citekey" "title" "url" "file" "author-or-editor" "keywords"))
  )
#+end_src

* Agenda
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files (list "inbox.org" ".inbox.org_done" "tickler.org" "personal.org"  ".personal.org_done" "areas.org" "books_series_films.org" "work.org")
        org-directory "~/prive/Dropbox/org")

  ;; use org-protocol to capture ideas
  ;; javascript:location.href='org-protocol://capture?template=i'+
  ;;       '&url='+encodeURIComponent(window.location.href)+
  ;; '&title='+encodeURIComponent(document.title)+
  ;; '&body='+encodeURIComponent(window.getSelection());
  (setq org-capture-templates
        `(("i" "Inbox" entry  (file "~/prive/Dropbox/org/inbox.org")
           ,(concat "* TODO %?%a\n"
                    ;; ":PROPERTIES:\n"
                    "CREATED: %U\n\n"
                    ;; ":END:\n\n"
                    "%i"))
          ))

  (setq org-agenda-hide-tags-regexp "inbox")
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          (todo   . " ")
          (tags   . " %i %-12:c")
          (search . " %i %-12:c")))

  (setq org-agenda-custom-commands
        '(
          ("n" . "Next Actions List")
          ("g" "Get Things Done (GTD)"
           ((agenda ""
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-deadline-warning-days 0)))
            (tags-todo "inbox"
                       ((org-agenda-prefix-format "  %?-12t% s")
                        (org-agenda-overriding-header "\nInbox\n")))
            (todo "NEXT"
                  (
                   ;; (org-agenda-skip-function
                   ;;  ;; '(org-agenda-skip-entry-if 'deadline)
                   ;;  ;; #'my-org-agenda-skip-all-siblings-but-first
                   ;;    #'my-org-agenda-skip-all-siblings-but-first
                   ;;  )
                   (org-agenda-prefix-format "  %i %-12:c [%e] ")
                   (org-agenda-overriding-header "\nTasks\n")
                   )
                  )
            ;; (agenda nil
            ;;         ((org-agenda-entry-types '(:deadline))
            ;;          (org-agenda-format-date "")
            ;;          (org-deadline-warning-days 7)
            ;;          (org-agenda-skip-function
            ;;           '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
            ;;          (org-agenda-overriding-header "\nDeadlines")))
            (tags "CLOSED>=\"<today>\""
                  ((org-agenda-overriding-header "\nCompleted today\n")))))
          ("w" "Work"
           (
            (tags-todo "+@work+postdoc"
                      ((org-agenda-prefix-format "  %?-12t% s")
                       (org-agenda-overriding-header "Post-doc\n"))
                      )
            (tags-todo "+@work+autocampus"
                      ((org-agenda-prefix-format "  %?-12t% s")
                       (org-agenda-overriding-header "\nautOCampus\n"))
                      )
            (tags-todo "+@work+these"
                      ((org-agenda-prefix-format "  %?-12t% s")
                       (org-agenda-overriding-header "\nThese\n"))
                      )
            )
           )
          ("r" "Reading List"
            (
             (tags-todo "+@work+reading_list"
                      ((org-agenda-prefix-format "  %?-12t% s")
                       (org-agenda-overriding-header "Reading List\n"))
                      )
            )
                )
          ("h" "At home" tags-todo "@home"
           ((org-agenda-overriding-header "Home"))
           )
          ))
  ;; from https://dindi.garjola.net/org-agenda-weekly.html
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)"
                 "STARTED(s!)" "|" "DONE(d!)")
                (type "PROJECT(p!)" "|" "DONE_PROJECT(D!)")
                (sequence "WAITING(w@!)" "SOMEDAY(S!)"  "|"
                          "CANCELLED(c@/!)"))))
  (setq hl-todo-keyword-faces
        '(("HOLD" . "#d0bf8f")
          ("TODO" . "#cc9393")
          ("NEXT" . "#dca3a3")
          ;; ("THEM" . "#dc8cc3")
          ;; ("PROG" . "#7cb8bb")
          ;; ("OKAY" . "#7cb8bb")
          ;; ("DONT" . "#5f7f5f")
          ;; ("FAIL" . "#8c5353")
          ("DONE" . "#afd8af")
          ("NOTE"   . "#d0bf8f")
          ;; ("KLUDGE" . "#d0bf8f")
          ;; ("HACK"   . "#d0bf8f")
          ;; ("TEMP"   . "#d0bf8f")
          ;; ("FIXME"  . "#cc9393")
          ;; ("XXX+"   . "#cc9393")
          )
        )
  (setq org-todo-keyword-faces '(
                                 ("[-]" . +org-todo-active)
                                 ("STRT" . +org-todo-active)
                                 ("STARTED" . +org-todo-active)
                                 ("[?]" . +org-todo-onhold)
                                 ("WAITING" . +org-todo-onhold)
                                 ("PROJECT" . +org-todo-project)
                                 ;; ("NO" . +org-todo-cancel)
                                 ;; ("KILL" . +org-todo-cancel)
                                 )
        )

  (defun accacio/generate-agenda-weekly-review ()
    "Generate the agenda for the weekly review"
    (interactive)
    (let ((span-days 24)
          (offset-past-days 10))
      (message "Generating agenda for %s days starting %s days ago"
               span-days offset-past-days)
      (org-agenda-list nil (- (time-to-days (date-to-time
                                             (current-time-string)))
                              offset-past-days)
                       span-days)
      (org-agenda-log-mode)
      (goto-char (point-min))))

  (setq org-refile-targets
        '(
          ("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
          ("Eve.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
          ("personal.org" :maxlevel . 1)
          ("work.org" :maxlevel . 2)
          ("these.org" :maxlevel . 1)
          ("tickler.org" :maxlevel . 1)
          ("someday.org" :level . 1)
          ("books_series_films.org" :maxlevel . 9)
          )
        )

  ;; from https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
  ;; (setq org-capture-templates
  ;;       '(
  ;;         ("i" "Inbox" entry (file "inbox.org") (concat "* TODO %?\n" " Entered on %U"))
  ;;         ("t" "TODOS" )
  ;;        ("tp" "Personal todo" entry
  ;;         (file+headline "~/org/todo.org" "Inbox")
  ;;         "** TODO %?\n%i\n%a" :prepend t)
  ;;        ("tt" "These todo" entry
  ;;         (file+headline "~/org/todo_these.org" "Inbox")
  ;;         "** TODO %?\n%i\n%a" :prepend t)
  ;;        ("e" "Evelise" entry
  ;;         (file+headline "~/org/Eve.org" "Inbox")
  ;;         "** TODO %?\n%i\n%a" :prepend t)
  ;;        ("p" "Templates for projects")
  ;;        ("pt" "Project-local todo" entry
  ;;         (file+headline +org-capture-project-todo-file "Inbox")
  ;;         "* TODO %?\n%i\n%a" :prepend t)
  ;;        ("pn" "Project-local notes" entry
  ;;         (file+headline +org-capture-project-notes-file "Inbox")
  ;;         "* %U %?\n%i\n%a" :prepend t)
  ;;        ("pc" "Project-local changelog" entry
  ;;         (file+headline +org-capture-project-changelog-file "Unreleased")
  ;;         "* %U %?\n%i\n%a" :prepend t)
  ;;        ("o" "Centralized templates for projects")
  ;;        ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
  ;;        ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
  ;;        ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t)
  ;;        ))
  ;;               '(
  ;;                 ("e" "Evelise" entry (file+headline "~/Dropbox/org/private/Eve.org" "Inbox")
  ;;                  "** TODO %?\n%i%a "
  ;;                  :kill-buffer t)
  ;;                 )
  ;;               ;; org-capture-templates)
  )
#+end_src
* org-noter
#+begin_src emacs-lisp
(use-package! org-noter
  :config
  (setq
   org-noter-pdftools-markup-pointer-color "yellow"
   org-pdftools-use-isearch-link t
   org-noter-notes-search-path '("~/research/notes/")
   ;; org-noter-insert-note-no-questions t
   ;; org-noter-default-heading-title "Note on page $p$"
   org-noter-doc-split-fraction '(0.7 . 03)
   org-noter-always-create-frame nil
   org-noter-hide-other nil
   org-noter-pdftools-free-pointer-icon "Note"
   org-noter-pdftools-free-pointer-color "red"
   org-noter-kill-frame-at-session-end nil
   )
    ;; (map! :map (pdf-view-mode)
    ;;     :leader
    ;;     (:prefix-map ("n" . "notes")
    ;;       :desc "Write notes"                    "w" #'org-noter)
    ;;     ;; add orb-note
    ;;     )

  )
(use-package! org-pdftools
  :hook (org-load . org-pdftools-setup-link))

(use-package! org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)
    )
  )

#+end_src
* org-ref
#+begin_src emacs-lisp
(require 'org-ref)
(require 'org-ref-ivy)
(after! org-ref
    (setq bibtex-completion-notes-path "~/research/notes/"
          org-ref-notes-function 'orb-edit-notes)

(setq org-ref-bibliography-entry-format
      '(
        ("article" . "%a, %t, <i>%j</i>, <b>%v(%n)</b>, %p (%y). <a href=\"%U\">link</a>. <a href=\"http://dx.doi.org/%D\">doi</a>.")
        ("book" . "%a, %t, %u (%y).")
        ("thesis" . "%a, %t, %s (%y).  <a href=\"%U\">link</a>. <a href=\"http://dx.doi.org/%D\">doi</a>.")
        ("misc" . "%a, %t (%y).  <a href=\"%U\">link</a>. <a href=\"http://dx.doi.org/%D\">doi</a>.")
        ("inbook" . "%a, %t, %b (pp. %p), %u (%y), <a href=\"%U\">link</a>. <a href=\"http://dx.doi.org/%D\">doi</a>.")
        ("techreport" . "%a, %t, %i, %u (%y).")
        ("proceedings" . "%e, %t in %S, %u (%y).")
        ("inproceedings" . "%a, %t, %p, in %b, edited by %e, %u (%y)"))
      )
)
#+end_src
* app
** rss
#+begin_src emacs-lisp
(map! :map doom-leader-map "n R" 'elfeed)
(setq rmh-elfeed-org-files (list "~/Dropbox/org/elfeed.org"))
(after! elfeed

(defun accacio/elfeed-search-print-entry (entry)
  "Print ENTRY to the buffer."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (mapconcat
                    (lambda (s) (propertize s 'face 'elfeed-search-tag-face))
                    tags ","))
         (title-width (- (window-width) 10 elfeed-search-trailing-width))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               elfeed-search-title-max-width)
                        :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))


    (insert (propertize date 'face 'elfeed-search-date-face) " ")
    (insert (propertize title-column 'face title-faces 'kbd-help title) " ")
    (when feed-title
      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " "))
    (when tags
      (insert "(" tags-str ")"))))


(setq elfeed-search-header-function #'elfeed-search--header
 ;; elfeed-search-print-entry-function #'elfeed-goodies/entry-line-draw
 elfeed-search-print-entry-function #'accacio/elfeed-search-print-entry
 elfeed-goodies/entry-pane-position 'bottom
 elfeed-goodies/entry-pane-size .4
 )



(defun elfeed-search-tag-all (&rest tags)
  "Apply TAG to all selected entries."
  (interactive (list (intern (read-from-minibuffer "Tag: "))))
  (let ((entries (elfeed-search-selected)))
    (cl-loop for tag in tags do (elfeed-tag entries tag))
    (mapc #'elfeed-search-update-entry entries)
    (unless (or elfeed-search-remain-on-entry (use-region-p))
      (forward-line))))

(defun elfeed-search-untag-all (&rest tags)
  "Remove TAG from all selected entries."
  (interactive (list (intern (read-from-minibuffer "Tag: "))))
  (let ((entries (elfeed-search-selected)))
    (cl-loop for value in tags do (elfeed-untag entries value))
    (mapc #'elfeed-search-update-entry entries)
    (unless (or elfeed-search-remain-on-entry (use-region-p))
      (forward-line))))

(defun elfeed-search-toggle-all ( &rest tags)
  "Toggle TAG on all selected entries."
  (interactive (list (intern (read-from-minibuffer "Tag: "))))
  (let ((entries (elfeed-search-selected)) entries-tag entries-untag)
    (cl-loop for tag in tags do
      (cl-loop for entry in entries
             when (elfeed-tagged-p tag entry)
             do (elfeed-untag-1 entry tag)
             else do (elfeed-tag-1 entry tag)))
    (mapc #'elfeed-search-update-entry entries)
    (unless (or elfeed-search-remain-on-entry (use-region-p))
      (forward-line))))

(evil-define-key 'normal elfeed-search-mode-map "i" (lambda () (interactive)(elfeed-search-toggle-all 'important 'readlater)))
(evil-define-key 'visual elfeed-search-mode-map "i" (lambda () (interactive)(elfeed-search-toggle-all 'important 'readlater)))
(evil-define-key 'normal elfeed-search-mode-map "t" (lambda () (interactive)(elfeed-search-toggle-all 'readlater)))
(evil-define-key 'visual elfeed-search-mode-map "t" (lambda () (interactive)(elfeed-search-toggle-all 'readlater)))
(evil-define-key 'visual elfeed-search-mode-map "i" (lambda () (interactive)(elfeed-search-toggle-all 'important )))

(evil-define-key 'normal elfeed-search-mode-map "I" (lambda () (interactive)(elfeed-search-set-filter "@1-week-ago +important ")))
(evil-define-key 'normal elfeed-search-mode-map "R" (lambda () (interactive)(elfeed-search-set-filter "@1-week-ago +readlater ")))

(evil-define-key 'normal elfeed-show-mode-map "U" 'elfeed-show-tag--unread)
(evil-define-key 'normal elfeed-show-mode-map "t" (elfeed-expose #'elfeed-show-tag 'readlater))
(evil-define-key 'normal elfeed-show-mode-map "i" (elfeed-expose #'elfeed-show-tag 'important))

(defun elfeed-search-show-entry (entry)
  "Display the currently selected item in a buffer."
  (interactive (list (elfeed-search-selected :ignore-region)))
  (require 'elfeed-show)
  (when (elfeed-entry-p entry)
    ;; (elfeed-untag entry 'unread)
    (elfeed-search-update-entry entry)
    ;; (unless elfeed-search-remain-on-entry (forward-line))
    (elfeed-show-entry entry)))

(defun accacio/elfeed-search-copy-article ()
  (interactive)
  (let ( (entries (elfeed-search-selected)) (links ""))
               (elfeed-search-untag-all 'readlater 'unread)
  (cl-loop for entry in entries
           when (elfeed-entry-link entry)
           do (progn (setq links (concat links (concat "- [ ] " (if (elfeed-tagged-p 'important entry) "* " "") (org-make-link-string  (concat "https://ezproxy.universite-paris-saclay.fr/login?url=" (elfeed-entry-link entry)) (elfeed-entry-title entry)) "\n" )))
               )
           )
  (kill-new links)
  )
  )
(setq-default elfeed-search-filter "@1-week-ago +unread")

(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
(defface important-elfeed-entry
  '((t :foreground "#a00"))
  "Marks an control Elfeed entry.")
(defface control-elfeed-entry
  '((t :foreground "#2ba"))
  "Marks an control Elfeed entry.")

(defface readlater-elfeed-entry
  '((t :foreground "#Eec900"))
  "Marks a readlater Elfeed entry.")

(set-face-attribute 'elfeed-search-unread-title-face nil
                    :bold t :strike-through nil :underline nil :foreground "#bbb")

(set-face-attribute 'elfeed-search-title-face nil
                    :bold nil :strike-through t)

(push '(control control-elfeed-entry) elfeed-search-face-alist)
(push '(readlater readlater-elfeed-entry) elfeed-search-face-alist)
(push '(important important-elfeed-entry) elfeed-search-face-alist)

)

#+end_src
* Other functions
#+begin_src emacs-lisp
(defun accacio/find-straight-repos-file ()
  "Search for a file in `~/docsThese."
  (interactive)
  (dired "~/.emacs.d/.local/straight/repos/"))

(defun accacio/find-cfg-file ()
  "Search for a file in `~/dots'."
  (interactive)
  (doom-project-find-file "~/dots"))
(map! :leader :prefix "f" "a" #'accacio/find-cfg-file)
#+end_src
